import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import User from "../models/User.js";
import { sendEmail } from "../utils/sendMail.js";
import {
  RESET_PASSWORD_SECRET,
  RESET_PASSWORD_EXPIRES,
  CLIENT_URL,
  JWT_SECRET,
} from "../configs/enviroments.js";

const generateToken = (user) => {
  return jwt.sign(
    {
      userId: user._id,
      email: user.email,
      fullname: user.fullname,
      role: user.role,
    },
    JWT_SECRET,
    { expiresIn: "1h" }
  );
};

const authController = {
  register: async (req, res) => {
    const { fullname, email, password, phoneNumber, address } = req.body;

    try {
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
      }

      const hashedPassword = await bcrypt.hash(password, 10);

      const newUser = new User({
        fullname,
        email,
        password: hashedPassword,
        phoneNumber,
        address,
      });

      await newUser.save();

      res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
    } catch (error) {
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

login: async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    // N·∫øu t√†i kho·∫£n b·ªã kh√≥a -> kh√¥ng cho ƒëƒÉng nh·∫≠p
    if (user.isActive === false) {
      return res.status(403).json({
        message: "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a, vui l√≤ng li√™n h·ªá Admin",
        forceLogout: true, // FE s·∫Ω d·ª±a v√†o flag n√†y m√† redirect
        redirect: "/login?blocked=true" // FE c√≥ th·ªÉ ƒë·ªçc redirect URL t·ª´ ƒë√¢y
      });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });
    }

    const token = generateToken(user);

    res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      token,
      user: {
        _id: user._id,
        fullname: user.fullname,
        email: user.email,
        phoneNumber: user.phoneNumber,
        address: user.address,
        role: user.role,
      },
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
},


  oauthCallback: async (req, res) => {
    const user = req.user;
    if (!user) {
      return res.status(400).json({ message: "OAuth th·∫•t b·∫°i" });
    }

    const token = generateToken(user);
    res.redirect(`${CLIENT_URL}/oauth-success?token=${token}`);
  },

  forgotPassword: async (req, res) => {
    const { email } = req.body;

    try {
      const user = await User.findOne({ email });
      if (!user) {
        return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
      }

      const token = jwt.sign({ id: user._id }, RESET_PASSWORD_SECRET, {
        expiresIn: RESET_PASSWORD_EXPIRES,
      });

      const resetLink = `${CLIENT_URL}/reset-password/${token}`;

      await sendEmail(
        email,
        "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u",
        `Click v√†o link sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: ${resetLink}`
      );

      res.status(200).json({ message: "Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email" });
    } catch (error) {
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

resetPassword: async (req, res) => {
  const { token } = req.params;
  const { newPassword } = req.body;

  try {
    const decoded = jwt.verify(token, RESET_PASSWORD_SECRET);
    const user = await User.findById(decoded.id);

    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    user.password = await bcrypt.hash(newPassword, 10);

    // üîë Ch·ªâ validate field b·ªã thay ƒë·ªïi
    await user.save({ validateModifiedOnly: true });

    res.status(200).json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t" });
  } catch (error) {
    res
      .status(400)
      .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n", error: error.message });
  }
},


updateUser: async (req, res) => {
  const { id } = req.params;
  let { fullname, phoneNumber, address, isActive } = req.body;

  // √âp ki·ªÉu sang boolean
  if (typeof isActive === "string") {
    isActive = isActive === "true";
  }

  try {
    const updatedUser = await User.findByIdAndUpdate(
      id,
      { fullname, phoneNumber, address, isActive },
      { new: true }
    ).select("-password");

    if (!updatedUser) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // N·∫øu t√†i kho·∫£n b·ªã kh√≥a => tr·∫£ th√™m flag ƒë·ªÉ client bi·∫øt ƒëƒÉng xu·∫•t
    if (isActive === false) {
      return res.json({
        message: "C·∫≠p nh·∫≠t th√†nh c√¥ng - T√†i kho·∫£n ƒë√£ b·ªã kh√≥a",
        user: updatedUser,
        forceLogout: true // flag cho frontend x·ª≠ l√Ω logout
      });
    }

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user: updatedUser });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
},
  // ======== ƒê·ªïi m·∫≠t kh·∫©u ========

changePassword: async (req, res) => {
    try {
      const { oldPassword, newPassword } = req.body;
      const userId = req.params.id;


      if (!userId) {
        return res.status(401).json({ message: "Token kh√¥ng ch·ª©a ID h·ª£p l·ªá" });
      }
      if (!newPassword || !oldPassword) {
        return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·ªß m·∫≠t kh·∫©u c≈© v√† m·ªõi" });
      }

      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
      }

      const isMatch = await bcrypt.compare(oldPassword, user.password);
      if (!isMatch) {
        return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c" });
      }

      user.password = await bcrypt.hash(newPassword, 10);
      await user.save();

      res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
    } catch (error) {
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

  deleteUser: async (req, res) => {
    const { id } = req.params;

    try {
      const deletedUser = await User.findByIdAndDelete(id);

      if (!deletedUser) {
        return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
      }

      res.json({ message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng" });
    } catch (error) {
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

  getAllUsers: async (req, res) => {
    try {
      const users = await User.find().select("-password");
      res.json(users);
    } catch (error) {
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

  getUserById: async (req, res) => {
    const { id } = req.params;

    try {
      const user = await User.findById(id).select("-password");

      if (!user) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
      }

      res.json(user);
    } catch (error) {
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },
};

export default authController;
