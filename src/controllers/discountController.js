import Discount from "../models/discount.js"
import mongoose from "mongoose"
import UserVoucher from "../models/UserVoucher.js"

// üü¢ L·∫•y t·∫•t c·∫£ m√£ gi·∫£m gi√°
export const getAllDiscounts = async (req, res, next) => {
  try {
    const { scope, userId } = req.query

    let filter = {}
    if (scope === "client") {
      filter.status = "active" // client ch·ªâ th·∫•y active
    }

    // L·∫•y t·∫•t c·∫£ voucher
    const discounts = await Discount.find(filter)

    if (userId && mongoose.Types.ObjectId.isValid(userId)) {
      // L·∫•y danh s√°ch voucher m√† user ƒë√£ claim (k·ªÉ c·∫£ ch∆∞a d√πng hay ƒë√£ d√πng)
      const userVouchers = await UserVoucher.find({ userId }).select("discountId")
      const takenIds = userVouchers.map(v => String(v.discountId))

      // L·ªçc b·ªè nh·ªØng c√°i user ƒë√£ claim
      const availableDiscounts = discounts.filter(
        d => !takenIds.includes(String(d._id))
      )

      return res.json({ success: true, data: availableDiscounts })
    }

    res.json({ success: true, data: discounts })
  } catch (error) {
    next(error)
  }
}

// üü¢ L·∫•y m√£ gi·∫£m gi√° theo ID
export const getDiscountById = async (req, res, next) => {
  const { id } = req.params

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({
      success: false,
      message: "ID m√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá",
    })
  }

  try {
    const discount = await Discount.findById(id)
    if (!discount) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√°",
      })
    }

    res.json({ success: true, data: discount })
  } catch (error) {
    next(error)
  }
}

// üü¢ Th√™m m√£ gi·∫£m gi√° m·ªõi
export const addDiscount = async (req, res, next) => {
  try {
    const {
      code,
      discount_type,
      discount_value,
      minOrderValue,
      date,
      status
    } = req.body

    // Ki·ªÉm tra tr√πng m√£ code
    const existingDiscount = await Discount.findOne({ code })
    if (existingDiscount) {
      return res.status(400).json({
        success: false,
        message: "M√£ gi·∫£m gi√° ƒë√£ t·ªìn t·∫°i",
      })
    }

    const newDiscount = new Discount({
      code,
      discount_type,
      discount_value,
      minOrderValue,
      date,
      status
    })

    await newDiscount.save()

    res.status(201).json({
      success: true,
      data: newDiscount,
    })
  } catch (error) {
    next(error)
  }
}

// üü¢ C·∫≠p nh·∫≠t m√£ gi·∫£m gi√°
export const updateDiscount = async (req, res, next) => {
  try {
    const {
      code,
      discount_type,
      discount_value,
      minOrderValue,
      date,
      status
    } = req.body

    const { id } = req.params

    // Ki·ªÉm tra tr√πng m√£ (tr·ª´ b·∫£n ghi ƒëang s·ª≠a)
    const existingDiscount = await Discount.findOne({
      code,
      _id: { $ne: id }
    })

    if (existingDiscount) {
      return res.status(400).json({
        success: false,
        message: "M√£ gi·∫£m gi√° ƒë√£ t·ªìn t·∫°i",
      })
    }

    const updatedDiscount = await Discount.findByIdAndUpdate(
      id,
      {
        code,
        discount_type,
        discount_value,
        minOrderValue,
        date,
        status
      },
      { new: true }
    )

    if (!updatedDiscount) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y m√£ khuy·∫øn m√£i",
      })
    }

    res.json({
      success: true,
      data: updatedDiscount,
    })
  } catch (error) {
    next(error)
  }
}

// üü¢ X√≥a m√£ gi·∫£m gi√°
export const deleteDiscount = async (req, res, next) => {
  try {
    const deletedDiscount = await Discount.findByIdAndDelete(req.params.id)
    if (!deletedDiscount) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y m√£ khuy√™ÃÅn maÃ£i",
      })
    }

    res.json({
      success: true,
      message: "X√≥a m√£ gi·∫£m gi√° th√†nh c√¥ng",
    })
  } catch (error) {
    next(error)
  }
}

// üü¢ L·∫•y voucher c·ªßa user
export const getUserVoucher = async (req, res, next) => {
  const { userId } = req.params
  if (!mongoose.Types.ObjectId.isValid(userId))
    return res.status(400).json({ success: false, message: "ID kh√¥ng h·ª£p l·ªá" })

  try {
    const vouchers = await UserVoucher.find({ userId }).populate("discountId")
    res.json({ success: true, data: vouchers })
  } catch (err) {
    next(err)
  }
}

// üü¢ L∆∞u voucher cho user
export const saveUserVoucher = async (req, res, next) => {
  const { userId } = req.params
  const { discountId } = req.body

  if (
    !mongoose.Types.ObjectId.isValid(userId) ||
    !mongoose.Types.ObjectId.isValid(discountId)
  ) {
    return res.status(400).json({ success: false, message: "ID kh√¥ng h·ª£p l·ªá" })
  }

  try {
    const already = await UserVoucher.findOne({ userId, discountId })
    if (already) {
      return res.status(400).json({ success: false, message: "Voucher ƒë√£ ƒë∆∞·ª£c l∆∞u" })
    }

    const newVoucher = await UserVoucher.create({ userId, discountId, used: false })

    res.json({ success: true, data: newVoucher })
  } catch (err) {
    next(err)
  }
}

// üü¢ X√≥a voucher c·ªßa user
export const removeUserVoucher = async (req, res, next) => {
  const { userId } = req.params
  const { discountId } = req.body

  if (
    !mongoose.Types.ObjectId.isValid(userId) ||
    !mongoose.Types.ObjectId.isValid(discountId)
  ) {
    return res.status(400).json({ success: false, message: "ID kh√¥ng h·ª£p l·ªá" })
  }

  try {
    await UserVoucher.findOneAndDelete({ userId, discountId })
    res.json({ success: true, message: "X√≥a voucher kh·ªèi user th√†nh c√¥ng" })
  } catch (err) {
    next(err)
  }
}

// üü¢ ƒê·ªïi tr·∫°ng th√°i m√£ gi·∫£m gi√°
export const toggleDiscountStatus = async (req, res, next) => {
  try {
    const { id } = req.params

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: "ID m√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá",
      })
    }

    const discount = await Discount.findById(id)
    if (!discount) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√°",
      })
    }

    // ƒê·ªïi tr·∫°ng th√°i
    discount.status = discount.status === "active" ? "inactive" : "active"
    await discount.save()

    res.json({
      success: true,
      message: `ƒê√£ chuy·ªÉn m√£ gi·∫£m gi√° sang tr·∫°ng th√°i ${discount.status}`,
      data: discount,
    })
  } catch (error) {
    next(error)
  }
}
